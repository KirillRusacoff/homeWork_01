//1. KISS, DRY, YAGNI.  "Антипаттерны" Чистого кода.

1.KISS (Keep It Simple, Stupid):
Принцип заключается в том, чтобы создавать простые, понятные и легко поддерживаемые решения.
В контексте JavaScript это может означать избегание излишней сложности в коде, использование простых и понятных алгоритмов, а также минимизацию лишних компонентов или функций.

2.DRY (Don't Repeat Yourself):
Суть DRY заключается в том, чтобы избегать повторения кода.
В JavaScript это может быть достигнуто путем создания функций, компонентов или модулей для общих задач, чтобы избежать дублирования одного и того же кода в разных частях приложения.

3.YAGNI (You Aren't Gonna Need It):
Принцип YAGNI предполагает, что не следует внедрять функциональность, которая в данный момент не требуется.
В контексте JavaScript это означает избегать добавления кода или функций, которые не являются необходимыми для текущих требований проекта. Это помогает избежать избыточной сложности и улучшает поддерживаемость кода.

4."Антипаттерны" Чистого кода
- Магические строки:
Использование жестко закодированных строк в коде без объяснения их смысла может привести к трудопонимаемости и увеличению вероятности ошибок. Лучше использовать константы или переменные с понятными именами.
- Глобальные переменные:
Использование глобальных переменных делает код менее предсказуемым и усложняет его тестирование и поддержку. Рекомендуется минимизировать использование глобальных переменных.
- Избыточная вложенность:
Глубокая вложенность колбэков может сделать код сложным для понимания. Лучше использовать промисы, async/await или другие подходы для управления асинхронным кодом.
- Избыточная сложность:
Создание излишне сложных конструкций или использование технологий, которые не оправдывают своего наличия в проекте, может усложнить код без явных преимуществ. Лучше следовать принципу KISS.
- Отсутствие обработки ошибок:
Необработанные ошибки могут привести к непредсказуемому поведению приложения. Важно предусмотреть обработку ошибок для улучшения надежности кода.

//2. LocalStorage, SessionStorage и Cookie.

1. LocalStorage:
- Хранит данные в виде ключ-значение.
- Предназначен для хранения данных на стороне клиента (браузера).
- Данные в LocalStorage не имеют срока давности и сохраняются даже после закрытия браузера.
- Вместимость около 5-10 МБ для каждого домена.

2. SessionStorage:
- Подобен LocalStorage, но данные существуют только в течение сессии браузера.
- Данные удаляются при закрытии вкладки или браузера.
- Имеет тот же объем вмещаемости, что и LocalStorage.

3. Cookie:
- Хранит данные в виде пары имя-значение.
- Передается между клиентом и сервером с каждым HTTP-запросом.
- Имеет срок давности, после которого данные удаляются.
- Ограничен по объему до 4 КБ на один домен.

//3. HTML / CSS - Базовая структура html документа, БЭМ методология

1. HTML документ:
- <!DOCTYPE html>: Объявление типа документа, обычно располагается в самом начале.
- <html>: Корневой элемент, содержащий всё содержимое документа.
- <head>: Содержит мета-информацию о документе, такую как кодировка, заголовок страницы, связанные стили и скрипты.
- <meta charset="UTF-8">: Устанавливает кодировку документа, обычно UTF-8.
- <meta name="viewport" content="width=device-width, initial-scale=1.0">: Определяет параметры отображения страницы на устройствах с различными экранами.
- <title>: Определяет заголовок страницы, который отображается во вкладке браузера или при сохранении в закладках.
- <body>: Содержит основное содержимое страницы, такое как текст, изображения, ссылки и другие элементы.

2. CSS:
- Общие стили:
Устанавливают обнуление отступов и полей для базового элемента body, задают шрифт по умолчанию и интерлиньяж.

- Стили для разделов:
Для шапки (header), навигации (nav), основного содержимого (main), и футера (footer).

3. БЭМ (Блок-Элемент-Модификатор) методология:
- Блок: Независимый компонент, который можно использовать самостоятельно.
- Элемент: Часть блока, не имеющая смысла вне контекста блока.
- Модификатор: Изменение внешнего вида или поведения блока или элемента.
- Создана в компании Яндекс. 
- Основная задача - делать код более читаемым, поддерживаемым и масштабируемым.

//4. Паттерны функционального программирования

1. Чистые функции: Функции, которые всегда возвращают одинаковый результат для одних и тех же входных данных, и не имеют побочных эффектов. Это делает код более предсказуемым и легким для тестирования.
2. Неизменяемость: Предпочтение неизменяемым структурам данных и избегание изменения состояния после создания. Это уменьшает сложность кода и способствует безопасности.
3. Функции высшего порядка: Функции, которые могут принимать другие функции в качестве аргументов или возвращать их. Это позволяет создавать абстракции и работать с функциями как с данными.
4. Замыкания: Функции, которые запоминают окружение, в котором они были созданы, и могут обращаться к переменным из этого окружения даже после того, как оно вышло из области видимости.
5. Рекурсия: Использование функций, которые вызывают сами себя, вместо циклов. Это часто используется для обработки структур данных, таких как списки.
6. Функциональные композиции (Function Composition): Объединение нескольких функций для создания новых. Это позволяет строить сложную логику из простых и многократно использовать функции.
7. Monads: Абстракция, используемая для управления побочными эффектами в функциональном программировании. Примеры включают Maybe, Either и IO монады.
8. Functors: Объекты или структуры данных, которые могут быть отображены с использованием функции. В JavaScript, например, массивы являются функторами.

//5. Способы позиционирования контента на странице

1. Статическое позиционирование - это значение по умолчанию. Элементы располагаются в потоке документа в порядке, определенном структурой HTML.
2. Относительное позиционирование - элемент позиционируется относительно своего нормального положения в потоке документа.
3. Абсолютное позиционирование - элемент вырывается из потока документа и позиционируется относительно ближайшего позиционированного предка.
4. Фиксированное позиционирование - элемент позиционируется относительно вьюпорта и не двигается при прокрутке страницы.
5. Липкое позиционирование - элемент начинает прилипать к верхней или нижней границе вьюпорта при прокрутке.

//6. Вес  селекторов

- Универсальный селектор: * (вес: 0)
- Типовые селекторы: div, p, a и т.п. (вес: 1)
- Элементы и псевдоэлементы: :hover, ::before и т.п. (вес: 1)
- Классовые селекторы: .class (вес: 10)
- ID-селекторы: #id (вес: 100)