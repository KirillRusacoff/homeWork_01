1. Подробно прочитать про метод запроса OPTIONS - и кратко его описать, когда вызывается, где используется, 
что передает и принимает. 

Ответ:

- Метод OPTION  один из методов HTTP. 
- Является методом запроса параметров связи для ресурса идентифицированного по URI. 
- Не вызывает действий с ресурсом. Предоставляет информацию в ответе.
- Не содержит тела запроса (его можно добавить для бльшей информативности, но некоторые сервера могу его отбросить).
-Не может быть кэширован.


2. Прочитать и описать ключевые особенности "HTTP" Версии 3.0

Ответ:

- Основной отличительной чертой HTTP/3 является использование протокола QUIC в качестве транспортного уровня. 
QUIC предоставляет надежный и безопасный транспорт поверх UDP (User Datagram Protocol), что помогает уменьшить задержки, 
связанные с установкой соединения, и позволяет более эффективно использовать ресурсы сети.
- Внедряет многопоточность на уровне транспорта. Это означает, что множество потоков данных может передаваться в рамках 
одного соединения, что может повысить эффективность передачи данных и снизить задержки.
- HTTP/3 использует новый метод сжатия заголовков, называемый QPACK. Этот метод призван решить некоторые проблемы, 
связанные с использованием старых методов сжатия заголовков в предыдущих версиях протокола HTTP.
- HTTP/3 ориентирован на оптимизацию передачи данных для мобильных устройств и сетей с высокой задержкой. 
Использование QUIC и другие технические изменения предназначены для улучшения производительности на мобильных устройствах.


3. Написать по 2 примера создания примитивных значений (если есть несколько способов - использовать) (string, number, boolean, null, undefined, symbol, bigInt)

Ответ в main.js

4. Почему, если обратиться к переменным созданным через let, const до их объявления - мы получаем ReferenceError?

Ответ:

Это происходит из-за того, что переменные, объявленные с использованием ключевых слов let и const, не поднимаются в начало блока, как это происходит с переменными, объявленными с использованием var. Когда идет обращение к переменной до её объявления (при условии, что обращение происходит в том же блоке кода), JavaScript не знает о существовании такой переменной, и это приводит к ошибке ReferenceError.

5. Решить

Ответ в main.js



